plugins {
    id "application"
}

group "info.novatec"

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

repositories {
    mavenLocal()
}

dependencies {
    implementation(project(":micronaut-camunda-bpm-feature"))
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("info.novatec:micronaut-camunda-bpm-feature:0.0.1-SNAPSHOT")
    implementation("org.camunda.bpm:camunda-engine:$camundaVersion")
    implementation("com.h2database:h2")
    runtimeOnly("ch.qos.logback:logback-classic:1.2.3")
    testAnnotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.mockito:mockito-core:3.2.4")
    compile 'org.mybatis:mybatis:3.5.6-SNAPSHOT'
}

test.classpath += configurations.developmentOnly

mainClassName = "info.novatec.micronaut.camunda.bpm.example.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            '-parameters',
            // enables incremental compilation
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=micronaut.camunda.bpm.empty.*',
            "-Amicronaut.processing.group=$project.group",
            "-Amicronaut.processing.module=$project.name",
    ])
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}
